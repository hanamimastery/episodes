#!/usr/bin/env ruby
# frozen_string_literal: true

require 'English'
class Installer
  class << self
    def call(app_name)
      rename_app app_name
      install_readme
      generate_cli_binstub
      self_destruct

      puts 'Your app is ready to go!'
    end

    private

    # Borrowed from github.com/carbonfive/raygun
    def rename_app(app_name)
      dash_name = app_name.tr('_', '-')
      snake_name = app_name.tr('-', '_')
      camel_name = camelize(snake_name)
      title_name = titleize(snake_name)

      {
        'Sandbox' => camel_name,
        'app-prototype' => dash_name,
        'sandbox' => snake_name,
        'App Prototype' => title_name
      }.each do |proto_name, new_name|
        # LC_ALL=C is required to avoid "RE error: illegal byte sequence" errors on macOS
        shell "find . -type f -print | grep --invert-match .git | xargs #{sed_i} 's/#{proto_name}/#{new_name}/g'",
              'LC_ALL' => 'C'
      end

      %w[d f].each do |find_type|
        shell "find . -depth -type #{find_type} -name '*sandbox*' " \
              "-exec bash -c 'mv $0 ${0/sandbox/#{snake_name}}' {} \\;"
      end
    end

    def generate_cli_binstub
      shell 'bundle binstubs hanami-cli'
    end

    def install_readme
      shell 'mv README.app.md README.md'
    end

    def self_destruct
      shell 'rm -f .github/FUNDING.yml'
      shell 'rm bin/install'
    end

    def camelize(string)
      result = string.sub(/^[a-z\d]*/) { ::Regexp.last_match(0).capitalize }
      result.gsub(%r{(?:_|(/))([a-z\d]*)}) { "#{Regexp.last_match(1)}#{Regexp.last_match(2).capitalize}" }
    end

    def titleize(underscored_string)
      result = underscored_string.tr('_', ' ')
      result.gsub(/\b('?[a-z])/) { Regexp.last_match(1).capitalize }
    end

    def shell(command, env = {})
      result = system(env, command)

      return if result

      raise "#{command} failed with status #{$CHILD_STATUS.exitstatus}\n\n#{output}"
    end

    # Distinguish BSD vs GNU sed with the --version flag (only present in GNU sed).
    def sed_i
      @sed_i ||= begin
        `sed --version &> /dev/null`
        $CHILD_STATUS.success? ? 'sed -i' : "sed -i ''"
      end
    end
  end
end

project_name = ARGV[0]

raise "Please provide a snake_cased project name, e.g.\n\n./bin/install my_app" unless project_name

Installer.call(project_name)
